<h1 class="text-2xl font-bold mb-4 mt-14">Your Bookings</h1>

<section>
  <ul id="notifications" class="space-y-2"></ul>
  <p id="no-info-p">You currently have no new notifications.</p>
  <button onclick="clearStorage()" class="bg-red-500 w-24 h-10 mt-6 p-2 rounded">Clear</button>
</section>
<!-- Modal -->
<!-- <div id="modal" class="fixed inset-0 hidden bg-black bg-opacity-50 flex items-center justify-center z-50">
  <div class="bg-white w-full h-full relative">
    <button onclick="closeModal()" class="absolute top-4 right-4 bg-gray-300 px-3 py-1 rounded">Close</button>
    <iframe id="modal-iframe" src="" class="w-full h-full border-none"></iframe>
  </div>
</div> -->
<!-- Canvas Modal -->
<div id="canvasModal" class="fixed inset-0 hidden bg-black bg-opacity-50 flex items-center justify-center z-50">
  <div class="bg-white w-full h-full relative">
    <p class="absolute top-4 left-12 text-green-400 text-4xl" id="timerP"></p>
    <p class="absolute top-12 left-12 text-orange-400 text-xl" id="roomP"></p>
    <button onclick="closeModal()" class="absolute top-4 right-4 bg-gray-300 px-3 py-1 rounded">Exit</button>
    <canvas id="renderCanvas" class="w-full h-full border-none"></canvas>
  </div>
</div>
<script src="https://cdn.babylonjs.com/babylon.js"></script>
<script type="module">
class BabylonRoom {
    roomId;
    room;
    timer;
    canvas;

    constructor(canvas, roomId, room, timer) {
        this.canvas = canvas;
        this.roomId = roomId;
        this.room = room;
        this.timer = timer;
    }

    createScene() {
        const engine = new BABYLON.Engine(this.canvas, true);
        const scene = new BABYLON.Scene(engine);
        scene.gravity = true;
        const camera = new BABYLON.ArcRotateCamera("camera", -Math.PI / 2, Math.PI / 2.5, 10, new BABYLON.Vector3(0, 0, 0), scene);
        camera.attachControl(this.canvas, true);
        const light = new BABYLON.HemisphericLight("light", new BABYLON.Vector3(1, 1, 0));
         light.intensity = 0.5;

    // Create a directional light
        const directionalLight = new BABYLON.DirectionalLight("dirLight", new BABYLON.Vector3(-1, -2, -1), scene);

        // Set light intensity
        directionalLight.intensity = 1.0;
        const ground = BABYLON.MeshBuilder.CreateGround("ground", {height: 15, width: 15, subdivisions: 10});
        const groundMaterial = new BABYLON.StandardMaterial("groundMaterial");
        groundMaterial.diffuseColor = this.room === "babylon-3rD" ? new BABYLON.Color3.FromHexString("#00ff00") : this.room === "threejs-fpm" ? new BABYLON.Color3.FromHexString("#ff0000") : new BABYLON.Color3.FromHexString("#0000ff");
        groundMaterial.backFaceCulling = false;
        ground.material = groundMaterial;

        const box = BABYLON.MeshBuilder.CreateBox("box", {size: 1}); //unit cube
        box.checkCollisions = true;    
        const boxMat = new BABYLON.StandardMaterial("boxMat");
        boxMat.diffuseTexture = new BABYLON.Texture("https://www.babylonjs-playground.com/textures/floor.png");
        box.scaling = new BABYLON.Vector3(1, 1, 1);
        box.position = new BABYLON.Vector3(5.4, 0.5, 3);
                box.material = boxMat;
            
            const roof = BABYLON.MeshBuilder.CreateCylinder("roof", {diameter: 1.3, height: 1.2, tessellation: 3});
        roof.scaling.x = 0.75;
        roof.rotation.z = Math.PI / 2;
                roof.position = new BABYLON.Vector3(5.4, 1.22, 3);
        //roof.position.y = 1.22;
          const roofMat = new BABYLON.StandardMaterial("roofMat");
        roofMat.diffuseTexture = new BABYLON.Texture("https://assets.babylonjs.com/environments/roof.jpg", scene);
                roof.material = roofMat;

        return scene;
    }
}

  // const renderCanvas = document.getElementById('renderCanvas');
  // let roomScene = new BabylonRoom(renderCanvas, "xX_99-Z0", "brown", "5");
  const inputMap = {}; // For player movement
  let roomInstance;

  window.addEventListener("DOMContentLoaded", () => {
    onWindowLoaded();
  });

    function onWindowLoaded() {
        const list = JSON.parse(localStorage.getItem('bookings')) || [];
        console.log("Loaded List: ", list);
        const ul = document.getElementById('notifications');

        if (list.length > 0) {
            document.getElementById('no-info-p').style.display = "none";   
            list.forEach(item => {
            const li = document.createElement('li');
            li.className = "flex items-center space-x-4"; // list item layout
          //  str += item+" ";
            li.textContent = item;//str.split(' ', 4);

            const acceptBtn = document.createElement('button');
            acceptBtn.textContent = 'Accept';
            acceptBtn.className = "ml-auto bg-green-500 text-white px-3 py-1 cursor-pointer rounded hover:bg-green-600 transition";
            // acceptBtn.onclick = () => {
            //     const matches = item.match(/\bhttps?:\/\/\S+/gi);
            //     acceptNotification(matches);
            // }
            acceptBtn.onclick = () => {
            //  console.log(str.split(' ', 4))
              document.getElementById('canvasModal').classList.remove('hidden');
              const canvas = document.getElementById("renderCanvas");
              console.log("Canvas?", canvas);  // Should NOT be null
              console.log("Instance?", canvas instanceof HTMLCanvasElement);  // Should be true
              let roomId = item[0];
              let room = item[1];
              let timer = item[2];

              document.getElementById("timerP").innerText = timer;
              document.getElementById("roomP").innerText = roomId;

              roomInstance = new BabylonRoom(canvas, roomId, room, timer);
              const scene = roomInstance.createScene()
              const cube = BABYLON.MeshBuilder.CreateBox("cube", { size: 0.5 }, scene);
              cube.position.set(1, 0.25, -2);
              cube.checkCollisions = true;
              const material = new BABYLON.StandardMaterial("cubeMaterial", scene);
              material.diffuseColor = new BABYLON.Color3(1, 1, 1);
              cube.material = material;
              scene.registerBeforeRender(() => {
                const speed = 0.1;
                if (inputMap["w"]) {
                    cube.moveWithCollisions(new BABYLON.Vector3(0, 0, speed));
                }
                if (inputMap["s"]) {
                    cube.moveWithCollisions(new BABYLON.Vector3(0, 0, -speed));
                }
                if (inputMap["a"]) {
                    cube.moveWithCollisions(new BABYLON.Vector3(-speed, 0, 0));
                }
                if (inputMap["d"]) {
                    cube.moveWithCollisions(new BABYLON.Vector3(speed, 0, 0));
                }
              });

              scene.actionManager = new BABYLON.ActionManager(scene);
              scene.actionManager.registerAction(new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnKeyDownTrigger, function (evt) {
                  inputMap[evt.sourceEvent.key] = evt.sourceEvent.type == "keydown";
              }));
              scene.actionManager.registerAction(new BABYLON.ExecuteCodeAction(BABYLON.ActionManager.OnKeyUpTrigger, function (evt) {
                  inputMap[evt.sourceEvent.key] = evt.sourceEvent.type == "keydown";
              }));

              const engine = scene.getEngine();
              engine.runRenderLoop(() => scene.render());
            }

            const rejectBtn = document.createElement('button');
            rejectBtn.textContent = 'Reject';
            rejectBtn.className = "bg-red-500 text-white px-3 py-1 cursor-pointer rounded hover:bg-red-600 transition";
            rejectBtn.onclick = () => alert(`${item} rejected`);

            li.appendChild(acceptBtn);
            li.appendChild(rejectBtn);

            ul.appendChild(li);
        });
        } else {
            document.getElementById('no-info-p').style.display = "block";
        }
    }

  //  window.onload = onWindowLoaded();

    // function acceptNotification(url) {
    // document.getElementById('modal-iframe').src = url;
    // document.getElementById('modal').classList.remove('hidden');
    // }

//   function rejectNotification(index) {
//     const li = document.getElementById(`notification-${index}`);
//     li.querySelector('.notification-text').classList.add('line-through', 'text-gray-500');
//   }

  // function closeModal() {
  //   document.getElementById('modal').classList.add('hidden');
  //   document.getElementById('modal-iframe').src = '';
  // }

</script>
<script>
        function closeModal() {
        document.getElementById('canvasModal').classList.add('hidden');
      }
    

    function clearStorage() {
        localStorage.removeItem("bookings");
        window.location.assign("/");
    }
</script>
